// Code generated by capnpc-go. DO NOT EDIT.

package data

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Artifact capnp.Struct

// Artifact_TypeID is the unique identifier for the type Artifact.
const Artifact_TypeID = 0xb1092b0e00ae75e5

func NewArtifact(s *capnp.Segment) (Artifact, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Artifact(st), err
}

func NewRootArtifact(s *capnp.Segment) (Artifact, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Artifact(st), err
}

func ReadRootArtifact(msg *capnp.Message) (Artifact, error) {
	root, err := msg.Root()
	return Artifact(root.Struct()), err
}

func (s Artifact) String() string {
	str, _ := text.Marshal(0xb1092b0e00ae75e5, capnp.Struct(s))
	return str
}

func (s Artifact) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Artifact) DecodeFromPtr(p capnp.Ptr) Artifact {
	return Artifact(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Artifact) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Artifact) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Artifact) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Artifact) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Artifact) Header() (Artifact_Header, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Artifact_Header(p.Struct()), err
}

func (s Artifact) HasHeader() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Artifact) SetHeader(v Artifact_Header) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewHeader sets the header field to a newly
// allocated Artifact_Header struct, preferring placement in s's segment.
func (s Artifact) NewHeader() (Artifact_Header, error) {
	ss, err := NewArtifact_Header(capnp.Struct(s).Segment())
	if err != nil {
		return Artifact_Header{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Artifact) Versions() (Artifact_PayloadVersion_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Artifact_PayloadVersion_List(p.List()), err
}

func (s Artifact) HasVersions() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Artifact) SetVersions(v Artifact_PayloadVersion_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewVersions sets the versions field to a newly
// allocated Artifact_PayloadVersion_List, preferring placement in s's segment.
func (s Artifact) NewVersions(n int32) (Artifact_PayloadVersion_List, error) {
	l, err := NewArtifact_PayloadVersion_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Artifact_PayloadVersion_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// Artifact_List is a list of Artifact.
type Artifact_List = capnp.StructList[Artifact]

// NewArtifact creates a new list of Artifact.
func NewArtifact_List(s *capnp.Segment, sz int32) (Artifact_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Artifact](l), err
}

// Artifact_Future is a wrapper for a Artifact promised by a client call.
type Artifact_Future struct{ *capnp.Future }

func (f Artifact_Future) Struct() (Artifact, error) {
	p, err := f.Future.Ptr()
	return Artifact(p.Struct()), err
}
func (p Artifact_Future) Header() Artifact_Header_Future {
	return Artifact_Header_Future{Future: p.Future.Field(0, nil)}
}

type Artifact_Header capnp.Struct

// Artifact_Header_TypeID is the unique identifier for the type Artifact_Header.
const Artifact_Header_TypeID = 0x89ee0ce874766dd3

func NewArtifact_Header(s *capnp.Segment) (Artifact_Header, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 8})
	return Artifact_Header(st), err
}

func NewRootArtifact_Header(s *capnp.Segment) (Artifact_Header, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 8})
	return Artifact_Header(st), err
}

func ReadRootArtifact_Header(msg *capnp.Message) (Artifact_Header, error) {
	root, err := msg.Root()
	return Artifact_Header(root.Struct()), err
}

func (s Artifact_Header) String() string {
	str, _ := text.Marshal(0x89ee0ce874766dd3, capnp.Struct(s))
	return str
}

func (s Artifact_Header) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Artifact_Header) DecodeFromPtr(p capnp.Ptr) Artifact_Header {
	return Artifact_Header(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Artifact_Header) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Artifact_Header) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Artifact_Header) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Artifact_Header) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Artifact_Header) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Artifact_Header) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Artifact_Header) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Artifact_Header) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Artifact_Header) SchemaVersion() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Artifact_Header) SetSchemaVersion(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s Artifact_Header) Role() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Artifact_Header) HasRole() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Artifact_Header) RoleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Artifact_Header) SetRole(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Artifact_Header) Type() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Artifact_Header) HasType() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Artifact_Header) TypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Artifact_Header) SetType(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Artifact_Header) Tags() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.TextList(p.List()), err
}

func (s Artifact_Header) HasTags() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Artifact_Header) SetTags(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewTags sets the tags field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Artifact_Header) NewTags(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s Artifact_Header) Scopes() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.TextList(p.List()), err
}

func (s Artifact_Header) HasScopes() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Artifact_Header) SetScopes(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewScopes sets the scopes field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Artifact_Header) NewScopes(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s Artifact_Header) Status() (string, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return p.Text(), err
}

func (s Artifact_Header) HasStatus() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s Artifact_Header) StatusBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return p.TextBytes(), err
}

func (s Artifact_Header) SetStatus(v string) error {
	return capnp.Struct(s).SetText(5, v)
}

func (s Artifact_Header) AuditTrail() (Artifact_AuditEntry_List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return Artifact_AuditEntry_List(p.List()), err
}

func (s Artifact_Header) HasAuditTrail() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s Artifact_Header) SetAuditTrail(v Artifact_AuditEntry_List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewAuditTrail sets the auditTrail field to a newly
// allocated Artifact_AuditEntry_List, preferring placement in s's segment.
func (s Artifact_Header) NewAuditTrail(n int32) (Artifact_AuditEntry_List, error) {
	l, err := NewArtifact_AuditEntry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Artifact_AuditEntry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s Artifact_Header) SecurityInfo() (Artifact_SecurityMetadata, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return Artifact_SecurityMetadata(p.Struct()), err
}

func (s Artifact_Header) HasSecurityInfo() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s Artifact_Header) SetSecurityInfo(v Artifact_SecurityMetadata) error {
	return capnp.Struct(s).SetPtr(7, capnp.Struct(v).ToPtr())
}

// NewSecurityInfo sets the securityInfo field to a newly
// allocated Artifact_SecurityMetadata struct, preferring placement in s's segment.
func (s Artifact_Header) NewSecurityInfo() (Artifact_SecurityMetadata, error) {
	ss, err := NewArtifact_SecurityMetadata(capnp.Struct(s).Segment())
	if err != nil {
		return Artifact_SecurityMetadata{}, err
	}
	err = capnp.Struct(s).SetPtr(7, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Artifact_Header_List is a list of Artifact_Header.
type Artifact_Header_List = capnp.StructList[Artifact_Header]

// NewArtifact_Header creates a new list of Artifact_Header.
func NewArtifact_Header_List(s *capnp.Segment, sz int32) (Artifact_Header_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 8}, sz)
	return capnp.StructList[Artifact_Header](l), err
}

// Artifact_Header_Future is a wrapper for a Artifact_Header promised by a client call.
type Artifact_Header_Future struct{ *capnp.Future }

func (f Artifact_Header_Future) Struct() (Artifact_Header, error) {
	p, err := f.Future.Ptr()
	return Artifact_Header(p.Struct()), err
}
func (p Artifact_Header_Future) SecurityInfo() Artifact_SecurityMetadata_Future {
	return Artifact_SecurityMetadata_Future{Future: p.Future.Field(7, nil)}
}

type Artifact_SecurityMetadata capnp.Struct

// Artifact_SecurityMetadata_TypeID is the unique identifier for the type Artifact_SecurityMetadata.
const Artifact_SecurityMetadata_TypeID = 0xcae7ba3c15ae287d

func NewArtifact_SecurityMetadata(s *capnp.Segment) (Artifact_SecurityMetadata, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Artifact_SecurityMetadata(st), err
}

func NewRootArtifact_SecurityMetadata(s *capnp.Segment) (Artifact_SecurityMetadata, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Artifact_SecurityMetadata(st), err
}

func ReadRootArtifact_SecurityMetadata(msg *capnp.Message) (Artifact_SecurityMetadata, error) {
	root, err := msg.Root()
	return Artifact_SecurityMetadata(root.Struct()), err
}

func (s Artifact_SecurityMetadata) String() string {
	str, _ := text.Marshal(0xcae7ba3c15ae287d, capnp.Struct(s))
	return str
}

func (s Artifact_SecurityMetadata) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Artifact_SecurityMetadata) DecodeFromPtr(p capnp.Ptr) Artifact_SecurityMetadata {
	return Artifact_SecurityMetadata(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Artifact_SecurityMetadata) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Artifact_SecurityMetadata) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Artifact_SecurityMetadata) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Artifact_SecurityMetadata) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Artifact_SecurityMetadata) EncryptionMethod() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Artifact_SecurityMetadata) HasEncryptionMethod() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Artifact_SecurityMetadata) EncryptionMethodBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Artifact_SecurityMetadata) SetEncryptionMethod(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Artifact_SecurityMetadata) AllowedUsers() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.TextList(p.List()), err
}

func (s Artifact_SecurityMetadata) HasAllowedUsers() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Artifact_SecurityMetadata) SetAllowedUsers(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewAllowedUsers sets the allowedUsers field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Artifact_SecurityMetadata) NewAllowedUsers(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s Artifact_SecurityMetadata) AllowedGroups() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.TextList(p.List()), err
}

func (s Artifact_SecurityMetadata) HasAllowedGroups() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Artifact_SecurityMetadata) SetAllowedGroups(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewAllowedGroups sets the allowedGroups field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Artifact_SecurityMetadata) NewAllowedGroups(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s Artifact_SecurityMetadata) PublicKey() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s Artifact_SecurityMetadata) HasPublicKey() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Artifact_SecurityMetadata) PublicKeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s Artifact_SecurityMetadata) SetPublicKey(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s Artifact_SecurityMetadata) ExpirationDate() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s Artifact_SecurityMetadata) SetExpirationDate(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

// Artifact_SecurityMetadata_List is a list of Artifact_SecurityMetadata.
type Artifact_SecurityMetadata_List = capnp.StructList[Artifact_SecurityMetadata]

// NewArtifact_SecurityMetadata creates a new list of Artifact_SecurityMetadata.
func NewArtifact_SecurityMetadata_List(s *capnp.Segment, sz int32) (Artifact_SecurityMetadata_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return capnp.StructList[Artifact_SecurityMetadata](l), err
}

// Artifact_SecurityMetadata_Future is a wrapper for a Artifact_SecurityMetadata promised by a client call.
type Artifact_SecurityMetadata_Future struct{ *capnp.Future }

func (f Artifact_SecurityMetadata_Future) Struct() (Artifact_SecurityMetadata, error) {
	p, err := f.Future.Ptr()
	return Artifact_SecurityMetadata(p.Struct()), err
}

type Artifact_AuditEntry capnp.Struct

// Artifact_AuditEntry_TypeID is the unique identifier for the type Artifact_AuditEntry.
const Artifact_AuditEntry_TypeID = 0xf9fe76b79e52631a

func NewArtifact_AuditEntry(s *capnp.Segment) (Artifact_AuditEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return Artifact_AuditEntry(st), err
}

func NewRootArtifact_AuditEntry(s *capnp.Segment) (Artifact_AuditEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return Artifact_AuditEntry(st), err
}

func ReadRootArtifact_AuditEntry(msg *capnp.Message) (Artifact_AuditEntry, error) {
	root, err := msg.Root()
	return Artifact_AuditEntry(root.Struct()), err
}

func (s Artifact_AuditEntry) String() string {
	str, _ := text.Marshal(0xf9fe76b79e52631a, capnp.Struct(s))
	return str
}

func (s Artifact_AuditEntry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Artifact_AuditEntry) DecodeFromPtr(p capnp.Ptr) Artifact_AuditEntry {
	return Artifact_AuditEntry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Artifact_AuditEntry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Artifact_AuditEntry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Artifact_AuditEntry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Artifact_AuditEntry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Artifact_AuditEntry) Timestamp() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s Artifact_AuditEntry) SetTimestamp(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s Artifact_AuditEntry) Action() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Artifact_AuditEntry) HasAction() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Artifact_AuditEntry) ActionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Artifact_AuditEntry) SetAction(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Artifact_AuditEntry) PerformedBy() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Artifact_AuditEntry) HasPerformedBy() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Artifact_AuditEntry) PerformedByBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Artifact_AuditEntry) SetPerformedBy(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Artifact_AuditEntry) SystemId() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Artifact_AuditEntry) HasSystemId() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Artifact_AuditEntry) SystemIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Artifact_AuditEntry) SetSystemId(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Artifact_AuditEntry) AdditionalInfo() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s Artifact_AuditEntry) HasAdditionalInfo() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Artifact_AuditEntry) AdditionalInfoBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s Artifact_AuditEntry) SetAdditionalInfo(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s Artifact_AuditEntry) DigitalSignature() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s Artifact_AuditEntry) HasDigitalSignature() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Artifact_AuditEntry) DigitalSignatureBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s Artifact_AuditEntry) SetDigitalSignature(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

// Artifact_AuditEntry_List is a list of Artifact_AuditEntry.
type Artifact_AuditEntry_List = capnp.StructList[Artifact_AuditEntry]

// NewArtifact_AuditEntry creates a new list of Artifact_AuditEntry.
func NewArtifact_AuditEntry_List(s *capnp.Segment, sz int32) (Artifact_AuditEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5}, sz)
	return capnp.StructList[Artifact_AuditEntry](l), err
}

// Artifact_AuditEntry_Future is a wrapper for a Artifact_AuditEntry promised by a client call.
type Artifact_AuditEntry_Future struct{ *capnp.Future }

func (f Artifact_AuditEntry_Future) Struct() (Artifact_AuditEntry, error) {
	p, err := f.Future.Ptr()
	return Artifact_AuditEntry(p.Struct()), err
}

type Artifact_PayloadVersion capnp.Struct

// Artifact_PayloadVersion_TypeID is the unique identifier for the type Artifact_PayloadVersion.
const Artifact_PayloadVersion_TypeID = 0x94b9b329dc103d17

func NewArtifact_PayloadVersion(s *capnp.Segment) (Artifact_PayloadVersion, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return Artifact_PayloadVersion(st), err
}

func NewRootArtifact_PayloadVersion(s *capnp.Segment) (Artifact_PayloadVersion, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return Artifact_PayloadVersion(st), err
}

func ReadRootArtifact_PayloadVersion(msg *capnp.Message) (Artifact_PayloadVersion, error) {
	root, err := msg.Root()
	return Artifact_PayloadVersion(root.Struct()), err
}

func (s Artifact_PayloadVersion) String() string {
	str, _ := text.Marshal(0x94b9b329dc103d17, capnp.Struct(s))
	return str
}

func (s Artifact_PayloadVersion) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Artifact_PayloadVersion) DecodeFromPtr(p capnp.Ptr) Artifact_PayloadVersion {
	return Artifact_PayloadVersion(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Artifact_PayloadVersion) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Artifact_PayloadVersion) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Artifact_PayloadVersion) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Artifact_PayloadVersion) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Artifact_PayloadVersion) VersionNumber() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Artifact_PayloadVersion) SetVersionNumber(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s Artifact_PayloadVersion) Timestamp() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s Artifact_PayloadVersion) SetTimestamp(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

func (s Artifact_PayloadVersion) ModifiedBy() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Artifact_PayloadVersion) HasModifiedBy() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Artifact_PayloadVersion) ModifiedByBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Artifact_PayloadVersion) SetModifiedBy(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Artifact_PayloadVersion) ChangeDescription() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Artifact_PayloadVersion) HasChangeDescription() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Artifact_PayloadVersion) ChangeDescriptionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Artifact_PayloadVersion) SetChangeDescription(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Artifact_PayloadVersion) Data() (Artifact_PayloadData_List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Artifact_PayloadData_List(p.List()), err
}

func (s Artifact_PayloadVersion) HasData() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Artifact_PayloadVersion) SetData(v Artifact_PayloadData_List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewData sets the data field to a newly
// allocated Artifact_PayloadData_List, preferring placement in s's segment.
func (s Artifact_PayloadVersion) NewData(n int32) (Artifact_PayloadData_List, error) {
	l, err := NewArtifact_PayloadData_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Artifact_PayloadData_List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s Artifact_PayloadVersion) IntegrityInfo() (Artifact_IntegrityCheck, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return Artifact_IntegrityCheck(p.Struct()), err
}

func (s Artifact_PayloadVersion) HasIntegrityInfo() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Artifact_PayloadVersion) SetIntegrityInfo(v Artifact_IntegrityCheck) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewIntegrityInfo sets the integrityInfo field to a newly
// allocated Artifact_IntegrityCheck struct, preferring placement in s's segment.
func (s Artifact_PayloadVersion) NewIntegrityInfo() (Artifact_IntegrityCheck, error) {
	ss, err := NewArtifact_IntegrityCheck(capnp.Struct(s).Segment())
	if err != nil {
		return Artifact_IntegrityCheck{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Artifact_PayloadVersion_List is a list of Artifact_PayloadVersion.
type Artifact_PayloadVersion_List = capnp.StructList[Artifact_PayloadVersion]

// NewArtifact_PayloadVersion creates a new list of Artifact_PayloadVersion.
func NewArtifact_PayloadVersion_List(s *capnp.Segment, sz int32) (Artifact_PayloadVersion_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4}, sz)
	return capnp.StructList[Artifact_PayloadVersion](l), err
}

// Artifact_PayloadVersion_Future is a wrapper for a Artifact_PayloadVersion promised by a client call.
type Artifact_PayloadVersion_Future struct{ *capnp.Future }

func (f Artifact_PayloadVersion_Future) Struct() (Artifact_PayloadVersion, error) {
	p, err := f.Future.Ptr()
	return Artifact_PayloadVersion(p.Struct()), err
}
func (p Artifact_PayloadVersion_Future) IntegrityInfo() Artifact_IntegrityCheck_Future {
	return Artifact_IntegrityCheck_Future{Future: p.Future.Field(3, nil)}
}

type Artifact_PayloadData capnp.Struct

// Artifact_PayloadData_TypeID is the unique identifier for the type Artifact_PayloadData.
const Artifact_PayloadData_TypeID = 0xc81c2986f9bce564

func NewArtifact_PayloadData(s *capnp.Segment) (Artifact_PayloadData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Artifact_PayloadData(st), err
}

func NewRootArtifact_PayloadData(s *capnp.Segment) (Artifact_PayloadData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Artifact_PayloadData(st), err
}

func ReadRootArtifact_PayloadData(msg *capnp.Message) (Artifact_PayloadData, error) {
	root, err := msg.Root()
	return Artifact_PayloadData(root.Struct()), err
}

func (s Artifact_PayloadData) String() string {
	str, _ := text.Marshal(0xc81c2986f9bce564, capnp.Struct(s))
	return str
}

func (s Artifact_PayloadData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Artifact_PayloadData) DecodeFromPtr(p capnp.Ptr) Artifact_PayloadData {
	return Artifact_PayloadData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Artifact_PayloadData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Artifact_PayloadData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Artifact_PayloadData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Artifact_PayloadData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Artifact_PayloadData) EncryptedData() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Artifact_PayloadData) HasEncryptedData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Artifact_PayloadData) SetEncryptedData(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s Artifact_PayloadData) EncryptionKeyId() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Artifact_PayloadData) HasEncryptionKeyId() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Artifact_PayloadData) EncryptionKeyIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Artifact_PayloadData) SetEncryptionKeyId(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// Artifact_PayloadData_List is a list of Artifact_PayloadData.
type Artifact_PayloadData_List = capnp.StructList[Artifact_PayloadData]

// NewArtifact_PayloadData creates a new list of Artifact_PayloadData.
func NewArtifact_PayloadData_List(s *capnp.Segment, sz int32) (Artifact_PayloadData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Artifact_PayloadData](l), err
}

// Artifact_PayloadData_Future is a wrapper for a Artifact_PayloadData promised by a client call.
type Artifact_PayloadData_Future struct{ *capnp.Future }

func (f Artifact_PayloadData_Future) Struct() (Artifact_PayloadData, error) {
	p, err := f.Future.Ptr()
	return Artifact_PayloadData(p.Struct()), err
}

type Artifact_IntegrityCheck capnp.Struct

// Artifact_IntegrityCheck_TypeID is the unique identifier for the type Artifact_IntegrityCheck.
const Artifact_IntegrityCheck_TypeID = 0x822aff03f637016a

func NewArtifact_IntegrityCheck(s *capnp.Segment) (Artifact_IntegrityCheck, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Artifact_IntegrityCheck(st), err
}

func NewRootArtifact_IntegrityCheck(s *capnp.Segment) (Artifact_IntegrityCheck, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Artifact_IntegrityCheck(st), err
}

func ReadRootArtifact_IntegrityCheck(msg *capnp.Message) (Artifact_IntegrityCheck, error) {
	root, err := msg.Root()
	return Artifact_IntegrityCheck(root.Struct()), err
}

func (s Artifact_IntegrityCheck) String() string {
	str, _ := text.Marshal(0x822aff03f637016a, capnp.Struct(s))
	return str
}

func (s Artifact_IntegrityCheck) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Artifact_IntegrityCheck) DecodeFromPtr(p capnp.Ptr) Artifact_IntegrityCheck {
	return Artifact_IntegrityCheck(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Artifact_IntegrityCheck) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Artifact_IntegrityCheck) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Artifact_IntegrityCheck) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Artifact_IntegrityCheck) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Artifact_IntegrityCheck) HashMethod() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Artifact_IntegrityCheck) HasHashMethod() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Artifact_IntegrityCheck) HashMethodBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Artifact_IntegrityCheck) SetHashMethod(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Artifact_IntegrityCheck) DataHash() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Artifact_IntegrityCheck) HasDataHash() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Artifact_IntegrityCheck) DataHashBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Artifact_IntegrityCheck) SetDataHash(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Artifact_IntegrityCheck) DigitalSignature() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Artifact_IntegrityCheck) HasDigitalSignature() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Artifact_IntegrityCheck) DigitalSignatureBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Artifact_IntegrityCheck) SetDigitalSignature(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// Artifact_IntegrityCheck_List is a list of Artifact_IntegrityCheck.
type Artifact_IntegrityCheck_List = capnp.StructList[Artifact_IntegrityCheck]

// NewArtifact_IntegrityCheck creates a new list of Artifact_IntegrityCheck.
func NewArtifact_IntegrityCheck_List(s *capnp.Segment, sz int32) (Artifact_IntegrityCheck_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[Artifact_IntegrityCheck](l), err
}

// Artifact_IntegrityCheck_Future is a wrapper for a Artifact_IntegrityCheck promised by a client call.
type Artifact_IntegrityCheck_Future struct{ *capnp.Future }

func (f Artifact_IntegrityCheck_Future) Struct() (Artifact_IntegrityCheck, error) {
	p, err := f.Future.Ptr()
	return Artifact_IntegrityCheck(p.Struct()), err
}

const schema_85d3acc39d94e0f8 = "x\xda\x8cUo\x88\x14\xf5\x1f\xfe<\xdf\xef\xfe\xfb\xc1" +
	"\xe9\xdd\xb0+\xbf\xfb\xc9\x0f\x0eB\xc1\xb5SN\x0c\x82" +
	"\xc3\xd8\xac\x95\xee\xb4\x8b\xfb\xde\xe6\x1f|7\xb7\xf3\xbd" +
	"\xdb\xb1\xdd\x9defV\xdb\x03\xa1\x84\xa2\x93z\x13\xbe" +
	"H\xc8H0P0K2\xd2P\xb0\x7f\x10Q\x94X" +
	"/\x02\x83z!\xf9\xc6H\x90\xd2\xb0&>{\xb33" +
	"swE\xbd\xdb}\xe633\xcf\xf7y\x9e\xcf3#" +
	"7\xc5\xc3\xa9M+\xbe\x94$\xd4p:\x13\xec\xc3\x83" +
	"\xbf\xc8`\xfd!2\x06\xf1\xeb\xf5\xf6\x99\x95\xf7\xff\xe7" +
	"lZf\x896\x7f\x81Q\xe4\xbfC\x96(\xff-\xde" +
	"\"\x04W\x1b\xfb\xfd\x1b}?\xcd\x93\x1aD<\x9b\xe3" +
	"\x81g\xc5o\xf9\x97\x04\xdf5/\x02\x10\x82\xff>4" +
	"p\xad\xf8\xce\x85#<+\xa2\xd9\x14O|\x92\x1aE" +
	"\xfe\x9b\xee\xcf+\xa9\xdd\xa0\xe8QF?\x82;\xdf\x1f" +
	"9\xf6\xd1\xe9\xab\xcfQ\x9a\x9f\x96\xdf\x96\xf90?\x91" +
	"\x99%\xca\x9f\xca\x1c \x04\xd6\xf5\x8bw\x9f/\xfe\xff" +
	"\xd3El\xbb\xef\xfd_\xf6>\xe4\x8bY\xbeim\x96" +
	"G\x0f\xae;\xb3j\xcb\xfb?~\xb6\x98m\xf7\xb5\xf3" +
	"\xd9\xed\xc8\x1f\xe3\xd9\xcdG\xb3CLwuu\xea\xb5" +
	"\xf7\xf6\xffqw\xf1p\x9a'~\xc8\xadF\xfe\x16\x9f" +
	"r\xf3\xcd\xdcn\xd0\x86\xc0t}{\xc6\xac\xfarc" +
	"\xd5l5[\xa3[\xc3\xff\x1b\xc7\x9b\xbe\x9eum\xbf" +
	"\xd4y\xb4\xa6\xabOM\x02\xaaO\xa6\x88R 2\xb6" +
	"\xed%Re\x095)`\x00\x0508\xb1\x9dH=" +
	".\xa1\xf6\x08\x18B\x14 \x88\x8c\x9d\x87\x89\xd4\x1e\x09" +
	"e\x09\x045\xd3\xabMh\xbfF\xd2\xb1\xd0G\x02}" +
	",\x83\xe9\x9bc\xa6W#\xa2\x18\xb3gm\xdf\xacW" +
	"`\xcf6M\xbf\xed\xea\xc4\xb5\x1ec\xb1\x94qiL" +
	"\x9b\x96v\x99\xe9\x9a\x88\xe9\xcd\xd5D\xea\x86\x84\xba-" +
	"\xd0#z\xcb%R?K\xa8{L\x14\x0bD\xef\xae" +
	"'R\xb7%\xa6 `HQ\x80$2~g\xf0\x8e" +
	"D%\xc5hJ\x16\x90\"\xca\x03\x0c\xdf\x93\xa8\x0c2" +
	"\x9cN\x15\x90&\xca\xaf\xc2(Qe\x00\x12\x95a\xc6" +
	"3\xe9\x022D\xf9b\x17_\xc3\xf8\x08\xe3\xd9L\xa1" +
	"\x1b\xc4\x0d\xd8KT\x19f|\x8c\xf1\\\xb6\x80\x1c\xe7" +
	"\x04\xfb\x88*e\xc6'! \xedX+\xafZ\xd3\x0d" +
	"s\x97\xa6!\xd7\xb3\x9d&r$\x90#\xf4\xbbN]" +
	"\xf7\x86\xfa\xfdN+\xf1\xc7\x9c\xf5\xb0\x920)\xd1\xc5" +
	"V\x12J^\xd5i\xe9\xe5\xa8o\xfam/\x96\xb9m" +
	"\xd9\xfe\x93\xaeI\xd2\xae\xf7F\x07\xe2l\x11\x18\x0c<" +
	"]m\xbb\xb6\xdf\xa1\xfe\xf1\xe6\x8c\x83\x818\xa9\x04\x0c" +
	"$\xdcZ\x96\xafI\xb3SwLkWIw\x8f\xc2" +
	"\xae\x0dF\xae\x1de\x87^\x91P'\x12\xf9:>E" +
	"\xa4^\x97P\xa7\x05\x10\xc6\xeb\x14\x07\xf1\xa4\x84:\xc7" +
	"\xaea\xc1\xb5\xb3/\x13\xa9s\x12\xea2\x9b&\xba\xa6" +
	"\x19\x97\xd8\xb3\xf3\x12\xeak\xb6Lv-3\xae\xf0{" +
	"\xbe\x92P\xd7\x04\x82\xfd\x0bL\x9e\xa0\xa1vcZ\xbb" +
	"=q\x03\xdfnh\xcf7\x1b\x84\x16\xd2$\x90&\x04" +
	"\x0d\xc7\xb2glm\x91|\xa4\x13IV\xad\x99\xcdY" +
	"]\xd6\xf0\xaa\xae\xdd\xf2m\x07\xcd\xc8\x07Ny,c" +
	"\xb4\xfa\xa1\x8cv\xb8l4\xd4\x09u\x8c\xaal\x89\x8e" +
	"KS\xdf]\xf2\xb8\xcd\x8c\xe2hl\x81\xb1\xf6pl" +
	"\x98Q\xdc\x1b\x17\x99Q\x9cK\xd4Oq:\xd1\x9c\xc5" +
	"\xb9p\x8f\x82J\xe8-&\xb4o2\x7f\xa2`+\xa7" +
	"b[\xd3'\xe9v\x82\x9e\x85\x14z\xd8\x03\xca\x945" +
	"}3\xe85\x08\x85\x15\xa2r\x91\xbf\xc5Q\"\xb5F" +
	"B\x8d$\xfc\xdd\xc0\xfd1,\xa1\xc6\x04J\xb5.\x07" +
	"\x0c\xc4G\x0b\x85\x08]\xf2\xb8.\"=\xa3\x83\x85z" +
	"\xfeS\xea\xcaL\x90#\x97\xa0\xc4QX'\xa1\x1eH" +
	"P\xdat\x88H\x8dH\xa8-\x02\x81nV\xddN\xcb" +
	"\xd74d\x95\xd9\xcd\x15$\xb0\x82\"\xdc\x86\xd3\xdc\xa1" +
	";\xe3\xd6\xf2\xaaJ-\xa5\xd1\x936V\x96\xc9\x14\"" +
	"2\x07\xb95\x9f\x91P/&\xc8\xcc\xef#R/\x84" +
	"K\xd1\xeb\xd7\xe3n\xb8\x14\x17y\x01\xe4\xc2\x02\\\x98" +
	"\x0a\xb3\xfe\xb1\x00R\x0b\xf9\xff`\x8eH]\x96P\x9f" +
	"\x8bE\x94\xb9\x8f\x1d+\xd9\xaf\xf5\xbas@[;\xa9" +
	"\xdf\xd3\xee\xd2\x96\xe8]}\x8c\x86\\\xa7\xddZv\xb9" +
	"\xd5\x9e\xae\xdb\xd5\x1d\x9a\x10\xaf\x85~\xbae\xbb\xa6o" +
	"S\xc9i\x96M_GK\xf4\xb7.\xf5R&\xdd\xce" +
	"\x92^\x98\x8a{!\xaa\x05\xce\xd2\xab\x12\xead\xa2\xcd" +
	"\xdf\x98&R'$\xd4\xdb\x896\x7f\x93\x03vZB" +
	"\x9d\x8f\xcb\xdcxw.Q\x16a\x95\x1b\x97\x0e'\xc4" +
	"\xfa\x8b\xfd/\x99U\x9f\xfb\xb7w\xc4\x96vg\x1c\xb7" +
	"\xa1)k%\xfa\xc0\xebx\xben\x8c[\xc9/\x9bi" +
	"Y6\xdfJ%\xb3\xde]\xf5\x7f\xf1\xc9\xfb3\x00\x00" +
	"\xff\xff\x1aR/\xb4"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_85d3acc39d94e0f8,
		Nodes: []uint64{
			0x822aff03f637016a,
			0x89ee0ce874766dd3,
			0x94b9b329dc103d17,
			0xb1092b0e00ae75e5,
			0xc81c2986f9bce564,
			0xcae7ba3c15ae287d,
			0xf9fe76b79e52631a,
		},
		Compressed: true,
	})
}
